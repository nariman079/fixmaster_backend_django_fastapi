# pylint: disable=too-many-arguments, too-many-positional-arguments
"""
–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
"""

import time


import logging

from celery import shared_task
from celery.signals import task_prerun, task_postrun, task_retry, task_failure
from telebot import types

from bot.config import master_bot, moderator_bot, organization_bot
from src.models import Master, Organization, Moderator, Customer
from src.utils.logger import RequestLogger


task_start_times = {}


# pylint: disable=unused-argument
@task_prerun.connect
def task_prerun_hanlder(sender=None, task_id=None, task=None, **kwargs):
    """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º –∑–∞–¥–∞—á–∏"""
    task_start_times[task_id] = time.time()


@task_postrun.connect
def task_postrun_hanlder(sender=None, task_id=None, task=None, **kwargs):
    """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è –ø–æ—Å–ª–µ –∑–∞–ø—É—Å–∫–∞ –∑–∞–¥–∞—á–∏"""
    logger = logging.getLogger("src.celery")
    start_time = task_start_times.get(task_id, None)
    if start_time:
        duration = time.time() - start_time
        if duration > 30.0:  # –±–æ–ª—å—à–µ 5 —Å–µ–∫—É–Ω–¥
            logger.warning(
                "–î–ª–∏—Ç–µ–ª—å–Ω–∞—è Celery-–∑–∞–¥–∞—á–∞",
                extra={
                    "task_name": sender.name,
                    "task_id": task_id,
                    "duration": round(duration, 3),
                    "event": "celery.slow.task",
                },
            )


@task_retry.connect
def task_retry_handler(sender=None, reason=None, **kwargs):
    """–ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏"""
    logger = logging.getLogger("src.celery")
    logger.warning(
        "–ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏",
        extra={
            "task_id": kwargs.get("task_id"),
            "task_name": sender.name,
            "reason": str(reason),
            "retries": kwargs.get("request", {}).get("retries", 0),
            "event": "celery.task.retry",
        },
    )


@task_failure.connect
def on_task_failure(
    sender=None, task_id=None, exception=None, traceback=None, **kwargs
):
    """–õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –∑–∞–¥–∞—á"""
    logger = logging.getLogger("src.celery")
    logger.error(
        "–û—à–∏–±–∫–∞ –≤ Celery –∑–∞–¥–∞—á–µ",
        extra={
            "task_name": sender.name,
            "task_id": task_id,
            "exception_type": type(exception).__name__,
            "exception_message": str(exception),
            "traceback": str(traceback)[:500],
            "event": "celery.task.failed",
        },
    )


def callback_verify_organization(organization_id: int, is_verify: bool) -> str:
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è callback data"""
    return f"organization_verify_{'true' if is_verify else 'false'}_{organization_id}"


def get_moderator_for_send_message() -> Moderator:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞"""
    return Moderator.objects.first()


@shared_task(bind=True)
def send_message_telegram_on_master(
    self,
    master_id: int,
    client_phone_number: str,
    booking_date: str,
    booking_time: str,
    request_id: str,
):
    """
    –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ú–∞—Å—Ç–µ—Ä—É –æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏
    """
    logger = RequestLogger(request_id)

    try:
        master = Master.objects.get(id=master_id)
        logger.info(
            "–ù–∞—á–∞–ª–∞—Å—å –æ—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ–ª–µ–≥—Ä–∞–º —Å–æ–æ–±—â–µ–Ω–∏—è",
            extra={
                "master_id": master.pk,
                "master_telegram_id": master.telegram_id,
                "event": "notify.send.telegram",
            },
        )

        text = (
            f"–£ –≤–∞—Å –Ω–æ–≤–∞—è –±—Ä–æ–Ω—å\n"
            f"–ö–ª–∏–µ–Ω—Ç: {client_phone_number}\n"
            f"–î–∞—Ç–∞: {booking_date}\n"
            f"–í—Ä–µ–º—è: {booking_time}"
        )

        master_bot.send_message(chat_id=master.telegram_id, text=text)
        logger.debug(
            "–°–æ–æ–±—â–µ–Ω–∏–µ –æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ",
            extra={
                "master_id": master.pk,
                "master_telegram_id": master.telegram_id,
                "event": "notify.send.telegram",
            },
        )
    except Exception as error:
        logger.error(
            "–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ–ª–µ–≥—Ä–∞–º —Å–æ–æ–±—â–µ–Ω–∏—è, –ø—Ä–æ–±—É–µ–º —Å–Ω–æ–≤–∞",
            extra={
                "error_message": f"{error}",
                "master_id": master.telegram_id,
                "event": "notify.send.telegram",
            },
        )
        raise self.retry(error, countdown=10, max_retries=3)


@shared_task
def send_message_about_verify_master(
    master_id: int,
):
    """
    –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –º–∞—Å—Ç–µ—Ä—É –æ –µ–≥–æ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
    """
    master = Master.objects.get(id=master_id)
    text = f"‚úÖ –ú–∞—Å—Ç–µ—Ä {master.name} {master.surname} –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è –≤ —Å–∏—Å—Ç–µ–º–µ \n"
    organization_bot.send_message(chat_id=master.organization.telegram_id, text=text)


@shared_task
def send_message_about_verify_customer(master_id: int, customer_id: int):
    """
    –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç—É –æ –µ–≥–æ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏

    """
    customer = Customer.objects.get(telegram_id=customer_id)
    text = (
        f"‚úÖ –ö–ª–∏–µ–Ω—Ç {customer.username} {customer.name} –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è –≤ —Å–∏—Å—Ç–µ–º–µ \n"
    )
    master_bot.send_message(chat_id=master_id, text=text)


@shared_task
def send_message_on_moderator_about_organization(organization_id: int):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –º–æ–¥–µ—Ä–∞—Ç–æ—Ä—É –æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–æ–≤–æ–π –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏"""
    organization = Organization.objects.get(pk=organization_id)
    moderator = get_moderator_for_send_message()
    gallery_url = "https://booking.fix-mst.ru/admin/src/image/?organization__id__exact="
    message = f"""–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é!üü©üü©üü©
        –ù–∞–∑–≤–∞–Ω–∏–µ: {organization.title}
        –ê–¥—Ä–µ—Å: {organization.address}
        –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {organization.contact_phone}
        –¢–∏–ø –æ–≥—Ä–∞–Ω–∏–∑–∞—Ü–∏–∏: {organization.organization_type.title}
        –ù–∞—á–∞–ª–æ —Ä–∞–±–æ—á–µ–≥–æ –¥–Ω—è: {organization.time_begin}
        –ö–æ–Ω–µ—Ü —Ä–∞–±–æ—á–µ–≥–æ –¥–Ω—è: {organization.time_end}\n
        –°—Å—ã–ª–∫–∞ –Ω–∞ –≥–∞–ª–µ—Ä–µ—é: {gallery_url}{organization.pk}"""

    moderator_inline_markup = types.InlineKeyboardMarkup()
    verify_true_button = types.InlineKeyboardButton(
        "‚úÖ –í–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å",
        callback_data=callback_verify_organization(organization_id, True),
    )
    verify_false_button = types.InlineKeyboardButton(
        "‚ùå –ù–µ –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å",
        callback_data=callback_verify_organization(organization_id, False),
    )
    moderator_inline_markup.add(verify_true_button)
    moderator_inline_markup.add(verify_false_button)
    moderator_bot.send_message(
        chat_id=moderator.telegram_id,
        text=message,
        reply_markup=moderator_inline_markup,
    )


@shared_task()
def send_is_verified_organization(
    organization_id: int,
    is_verify: bool,
):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–æ–≤–æ–π –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏"""
    organization = Organization.objects.get(pk=organization_id)
    if is_verify:
        message = """–•–æ—Ä–æ—à–∞—è –Ω–æ–≤–æ—Å—Ç—å! ‚ùáÔ∏è‚ùáÔ∏è‚ùáÔ∏è
–í–∞—à–∞ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è –±—ã–ª–∞ –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–Ω–∞.
–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–ª—è—Ç—å –º–∞—Å—Ç–µ—Ä–æ–≤ –∏ —É—Å–ª—É–≥.
        """
        organization_menu_markup = types.ReplyKeyboardMarkup()

        master_list = types.KeyboardButton("üìÉ –°–ø–∏—Å–æ–∫ –º–∞—Å—Ç–µ—Ä–æ–≤")
        client_list = types.KeyboardButton("üë• –°–ø–∏—Å–æ–∫ –∫–ª–∏–µ–Ω—Ç–æ–≤")
        add_master = types.KeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –º–∞—Å—Ç–µ—Ä–∞")

        organization_menu_markup.add(master_list)
        organization_menu_markup.add(client_list)
        organization_menu_markup.add(add_master)

        organization_bot.send_message(
            chat_id=organization.telegram_id,
            text=message,
            reply_markup=organization_menu_markup,
        )
    else:
        message = (
            "–í–∞—à–∞ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è –Ω–µ –ø—Ä–æ—à–ª–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é!‚ÄºÔ∏è\n"
            "–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –µ—â–µ —Ä–∞–∑ - /start"
        )
        organization_bot.send_message(
            chat_id=organization.telegram_id,
            text=message,
        )
