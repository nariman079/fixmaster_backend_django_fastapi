from django.urls import path

from src.views.order_views import OrderCreateView, FreeBookingView
from src.views.organization_views import (
    OrganizationListView,
    OrganizationDetailView,
    OrganizationTypeListView,
    SearchOrganization,
    ServiceListView,
    MasterListView,
)

urlpatterns = [
    path("order/create/", OrderCreateView.as_view()),
    path("booking/get-free-times/", FreeBookingView.as_view()),
    path("organizations/", OrganizationListView.as_view()),
    path("organizations/<int:organization_id>/", OrganizationDetailView.as_view()),
    path("organization/search/", SearchOrganization.as_view()),
    path("organizations-types/", OrganizationTypeListView.as_view()),
    path("services/", ServiceListView.as_view()),
    path("master/services/", MasterListView.as_view()),
]


from drf_spectacular.types import OpenApiTypes
from drf_spectacular.utils import extend_schema, OpenApiParameter
from rest_framework.exceptions import ValidationError
from rest_framework.response import Response
from rest_framework.views import APIView

from src.models import Organization
from src.serializers.organization_serializers import (
    OrganizationSerializer,
    OrganizationDetailSerializer,
)
from src.services.organization_services import (
    get_organization_types,
    search_organization,
    get_services_title,
    get_master_services,
)


class OrganizationListView(APIView):
    """
    Controller for the organization's list page

    accessed methods: GET,
    """

    serializer_class = OrganizationSerializer

    def get(self, request, *args, **kwargs):
        try:
            organization_queryset = Organization.objects.filter(
                **self.request.query_params.dict()
            ).filter(is_verified=True)
            organization_serializer = OrganizationSerializer(
                instance=organization_queryset,
                many=True,
                context={"request": self.request},
            )

            return Response(
                {
                    "message": "All organizations success received",
                    "success": True,
                    "data": organization_serializer.data,
                }
            )
        except ValueError as ex:
            raise ValidationError(ex.args, code=400)


class OrganizationDetailView(APIView):
    """
    Controller for the detailed organization page

    accessed methods: GET,
    path param: organization_id
    """

    def get(self, request, organization_id: int, *args, **kwargs):
        try:
            organization = Organization.objects.get(id=organization_id)
            organization_serializer = OrganizationDetailSerializer(
                instance=organization, context={"request": self.request}
            )

            return Response(
                {
                    "message": "Organization detail success received",
                    "success": True,
                    "data": organization_serializer.data,
                },
                status=200,
            )
        except Organization.DoesNotExist:
            return Response(
                {
                    "message": "Such organization does not exist",
                    "success": False,
                    "data": [],
                },
                status=404,
            )


class OrganizationTypeListView(APIView):
    def get(self, *args, **kwargs):
        """Получение списка типов организаций"""
        return get_organization_types()


class ServiceListView(APIView):
    """
    Controller for services list
    """

    def get(self, *args, **kwargs):
        """Получение списка услуг"""
        return get_services_title()


class SearchOrganization(APIView):
    @extend_schema(
        description="Search organization",
        methods=["GET"],
        parameters=[
            OpenApiParameter(
                name="search",
                type=OpenApiTypes.STR,
                location=OpenApiParameter.QUERY,
                description="Search text",
            ),
        ],
    )
    def get(self, *args, **kwargs):
        """
        search: query params from url ".../organization/?search="
        search: string
        """
        if text := self.request.query_params.get("search"):
            return search_organization(text)

        return Response(
            {"message": "Запрос успешно выполнен", "success": True, "data": []}
        )


class MasterListView(APIView):
    def get(self, *args, **kwargs) -> Response:
        """Получаем все услуги мастера"""
        return get_master_services(self.request.query_params.get("master_id", 0))

from rest_framework.response import Response
from rest_framework.views import APIView
from rest_framework.request import Request

from config import csm_metrics 

from src.serializers.order_serializers import OrderSerializer, BookingSerializer
from src.services.order_services import OrderCreateSrv, FreeBookingSrv


class OrderCreateView(APIView):
    serializer_class = OrderSerializer

    def post(self, request, *args, **kwargs) -> Response:
        """POST handler for creating order and booking"""
        self.request: Request
        serializer = OrderSerializer(data=self.request.data)
        serializer.is_valid(raise_exception=True)

        if isinstance(serializer.validated_data, dict):
            print(serializer)
            order_create_srv = OrderCreateSrv(
                serializer_validate_data=serializer.validated_data,
                serialzier_data=serializer.data,
            )
            return order_create_srv.execute()
        csm_metrics.APP_HTTP_REQUESTS.inc()
        return Response(
            {
                "message": "Bad error",
                "success": False,
                "data": [],
            },
            status=422,
        )


class FreeBookingView(APIView):
    serializer_class = BookingSerializer

    def post(self, request, *args, **kwargs) -> Response:
        """POST handler for creating order and booking"""
        self.request: Request
        serializer = BookingSerializer(data=self.request.data)
        serializer.is_valid(raise_exception=True)

        if isinstance(serializer.validated_data, dict):
            free_booking_src = FreeBookingSrv(
                serializer_validated_data=serializer.validated_data,
            )
            return free_booking_src.execute()

        return Response(
            {
                "message": "Bad error",
                "success": False,
                "data": [],
            },
            status=422,
        )

"""
Order serializers
"""

from rest_framework import serializers


class OrderSerializer(serializers.Serializer):
    """Order create serializer"""

    master_id = serializers.IntegerField()
    service_ids = serializers.ListField(child=serializers.IntegerField())
    begin_date = serializers.DateField()
    begin_time = serializers.TimeField()
    customer_phone = serializers.CharField(max_length=30)
    customer_name = serializers.CharField(
        max_length=60,
    )
    customer_notice = serializers.CharField(
        max_length=120, allow_null=True, required=False, allow_blank=True
    )


class BookingSerializer(serializers.Serializer):
    date = serializers.DateField()
    master_id = serializers.IntegerField()


from django.urls import path
from bot.views import (
    BotMyProfileView,
    BotOrganizationCreateView,
    BotModeratorGetProfileView,
    BotVerifyOrganizationView,
    BotGetOrganizationByTelegramIdView,
    BotGetOrganizationDataByTelegramIdView,
    MasterActionView,
    ServiceActionView,
    MasterVerifyView,
    MasterCustomerView,
    MasterNextSessionView,
    CustomerNextSessionView,
    CustomerVerifyView,
    CheckCustomerView,
)

urlpatterns = [
    path("get-my-profile/", BotMyProfileView.as_view(), name="get-profile"),
    path(
        "organization/create/",
        BotOrganizationCreateView.as_view(),
        name="bot-create-organization",
    ),
    path(
        "organization/verify/<int:organization_id>/",
        BotVerifyOrganizationView.as_view(),
        name="bot-organization-verify",
    ),
    path(
        "organization/get-by-telegram_id/<str:telegram_id>",
        BotGetOrganizationByTelegramIdView.as_view(),
        name="bot-organization-get-by-telegram_id",
    ),
    path(
        "organization-data/get-by-telegram_id/<str:telegram_id>",
        BotGetOrganizationDataByTelegramIdView.as_view(),
        name="bot-organization_data-get-by-telegram_id",
    ),
    path(
        "moderator/", BotModeratorGetProfileView.as_view(), name="get-moderator-profile"
    ),
    path("masters/<int:master_id>", MasterActionView.as_view()),
    path("masters/", MasterActionView.as_view()),
    path("masters/<int:master_id>/services/", ServiceActionView.as_view()),
    path("service/", ServiceActionView.as_view()),
    path("master/verify/", MasterVerifyView.as_view()),
    path("master/<str:telegram_id>/customers/", MasterCustomerView.as_view()),
    path("master/<str:telegram_id>/last-booking/", MasterNextSessionView.as_view()),
    path("customer/verify/", CustomerVerifyView.as_view()),
    path("customer/<str:telegram_id>/last-booking/", CustomerNextSessionView.as_view()),
    path("customer/check/", CheckCustomerView.as_view()),
]

from drf_spectacular.types import OpenApiTypes
from drf_spectacular.utils import OpenApiParameter, OpenApiRequest, extend_schema
from rest_framework.response import Response
from rest_framework.views import APIView

from bot.permissions import api_key_permission
from bot.services import (
    GetProfile,
    BotOrganizationCreate,
    BotModeratorGetProfile,
    BotVerifyOrganization,
    BotGetOrganizationByTelegramId,
    BotGetOrganizationDataByTelegramId,
    MasterDeleteSrv,
    MasterCreateSrv,
    MasterEditSrv,
    MasterServiceCreateSrv,
    MasterServiceDeleteSrv,
    MasterServiceDetailSrv,
    MasterServiceListSrv,
    MasterServiceEditSrv,
    MasterVerifySrv,
    MasterCustomers,
    MasterNextSessionSrv,
    CustomerNextSessionSrv,
    CustomerVerifySrv,
    CheckCustomerSrv,
)
from bot.serializers import (
    BotOrganizationCreateSerializer,
    BotModeratorGetProfileSerializer,
    MasterCreateSerializer,
    MasterEditSerializer,
    MasterServiceCreateSerializer,
    MasterVerifySerializer,
)


class BotMyProfileView(APIView):
    @extend_schema(
        description="Search organization",
        methods=[
            "GET",
        ],
        parameters=[
            OpenApiParameter(
                name="Api-Key",
                type=OpenApiTypes.STR,
                location=OpenApiParameter.HEADER,
                description="Api key for telegram",
            ),
            OpenApiParameter(
                name="phone_number",
                type=OpenApiTypes.STR,
            ),
            OpenApiParameter(name="telegram_id", type=OpenApiTypes.STR),
            OpenApiParameter(name="username", type=OpenApiTypes.STR),
            OpenApiParameter(name="user_keyword", type=OpenApiTypes.STR),
        ],
    )
    def get(self, *args, **kwargs) -> Response:
        """Получение профиля клиента"""
        if api_key_permission(request=self.request):
            user_params = self.request.query_params

            get_profile = GetProfile(data=user_params)
            return get_profile.execute()

        return Response(
            {
                "message": "Неизвествная ошибка\nОбратитесь к администратору @nariman079i",
                "success": False,
                "data": [],
            },
            status=422,
        )


class BotOrganizationCreateView(APIView):
    @extend_schema(
        description="Search organization",
        methods=[
            "POST",
        ],
        parameters=[
            OpenApiParameter(
                name="Api-Key",
                type=OpenApiTypes.STR,
                location=OpenApiParameter.HEADER,
                description="Api key for telegram",
            ),
            OpenApiParameter(
                name="title",
                type=OpenApiTypes.STR,
            ),
            OpenApiParameter(name="telegram_id", type=OpenApiTypes.STR),
            OpenApiParameter(name="main_image", type=OpenApiTypes.BINARY),
            OpenApiParameter(name="time_begin", type=OpenApiTypes.TIME),
            OpenApiParameter(name="time_end", type=OpenApiTypes.TIME),
            OpenApiParameter(name="address", type=OpenApiTypes.STR),
            OpenApiParameter(name="work_schedule", type=OpenApiTypes.STR),
            OpenApiParameter(name="organization_type", type=OpenApiTypes.STR),
            OpenApiParameter(name="contact_phone", type=OpenApiTypes.STR),
        ],
    )
    def post(self, request, *args, **kwargs) -> Response:
        """Создание организации"""
        if api_key_permission(request=self.request):
            organization_data = BotOrganizationCreateSerializer(data=self.request.data)
            organization_data.is_valid(raise_exception=True)
            create_organization = BotOrganizationCreate(
                organization_data=organization_data.validated_data
            )
            return create_organization.execute()

        return Response(
            {
                "message": "Неизвествная ошибка\nОбратитесь к администратору @nariman079i",
                "success": False,
                "data": ["Неверный API-KEY"],
            },
            status=422,
        )


class BotModeratorGetProfileView(APIView):
    def post(self, request, *args, **kwargs) -> Response:
        """Создание организации"""
        if api_key_permission(request=self.request):
            moderator_data = BotModeratorGetProfileSerializer(data=self.request.data)
            moderator_data.is_valid(raise_exception=True)
            moderator_get_profile = BotModeratorGetProfile(
                moderator_data=moderator_data.validated_data
            )
            return moderator_get_profile.execute()

        return Response(
            {
                "message": "Неизвествная ошибка\nОбратитесь к администратору @nariman079i",
                "success": False,
                "data": ["Неверный API-KEY"],
            },
            status=422,
        )


class BotVerifyOrganizationView(APIView):
    def post(self, request, *args, **kwargs):
        if api_key_permission(request=self.request):
            verify_organization_data = dict(
                organization_id=kwargs.get("organization_id"),
                is_verify=self.request.data.get("is_verify"),
            )
            verify_organization = BotVerifyOrganization(
                verify_organization_data=verify_organization_data
            )
            return verify_organization.execute()

        return Response(
            {
                "message": "Неизвествная ошибка\nОбратитесь к администратору @nariman079i",
                "success": False,
                "data": ["Неверный API-KEY"],
            },
            status=422,
        )


class BotGetOrganizationByTelegramIdView(APIView):
    def get(self, *args, **kwargs):
        if api_key_permission(request=self.request):
            organization_data = dict(telegram_id=kwargs.get("telegram_id"))

            get_organization_by_telegram_id = BotGetOrganizationByTelegramId(
                organization_data=organization_data
            )
            return get_organization_by_telegram_id.execute()

        return Response(
            {
                "message": "Неизвествная ошибка\nОбратитесь к администратору @nariman079i",
                "success": False,
                "data": ["Неверный API-KEY"],
            },
            status=422,
        )


class BotGetOrganizationDataByTelegramIdView(APIView):
    def get(self, *args, **kwargs):
        if api_key_permission(request=self.request):
            organization_data = dict(telegram_id=kwargs.get("telegram_id"))
            get_organization_by_telegram_id = BotGetOrganizationDataByTelegramId(
                organization_data=organization_data
            )
            return get_organization_by_telegram_id.execute()

        return Response(
            {
                "message": "Неизвествная ошибка\nОбратитесь к администратору @nariman079i",
                "success": False,
                "data": ["Неверный API-KEY"],
            },
            status=422,
        )


class MasterActionView(APIView):
    def post(self, request, *args, **kwargs):
        if api_key_permission(request=self.request):
            serializer = MasterCreateSerializer(data=self.request.data)
            serializer.is_valid(raise_exception=True)
            create_master = MasterCreateSrv(master_data=serializer.validated_data)
            return create_master.execute()

        return Response(
            {
                "message": "Неизвествная ошибка\nОбратитесь к администратору @nariman079i",
                "success": False,
                "data": ["Неверный API-KEY"],
            },
            status=422,
        )

    def patch(self, request, *args, **kwargs):
        if api_key_permission(request=self.request):
            serializer = MasterEditSerializer(data=self.request.data)
            serializer.is_valid(raise_exception=True)
            create_master = MasterEditSrv(
                master_data=serializer.validated_data, master_id=kwargs.get("master_id")
            )
            return create_master.execute()

        return Response(
            {
                "message": "Неизвествная ошибка\nОбратитесь к администратору @nariman079i",
                "success": False,
                "data": ["Неверный API-KEY"],
            },
            status=422,
        )

    def delete(self, request, *args, **kwargs):
        if api_key_permission(request=self.request):
            master_id = kwargs.get("master_id")
            delete_master = MasterDeleteSrv(master_id=master_id)
            return delete_master.execute()

        return Response(
            {
                "message": "Неизвествная ошибка\nОбратитесь к администратору @nariman079i",
                "success": False,
                "data": ["Неверный API-KEY"],
            },
            status=422,
        )


class ServiceActionView(APIView):
    def get(self, request, *args, **kwargs):
        if api_key_permission(self.request):
            service_id = self.request.query_params.get("service_id")
            master_id = kwargs.get("master_id")
            if service_id:
                master_service_detail = MasterServiceDetailSrv(service_id=service_id)
                return master_service_detail.execute()
            else:
                master_service_list = MasterServiceListSrv(master_id=master_id)
                return master_service_list.execute()
        return Response({"message": "Api-Key error", "success": False, "data": []})

    def post(self, request, *args, **kwargs):
        if api_key_permission(self.request):
            master_id = kwargs.get("master_id", None)
            serializer = MasterServiceCreateSerializer(data=self.request.data)
            serializer.is_valid(raise_exception=True)
            master_service_create = MasterServiceCreateSrv(
                master_id=master_id, service_data=serializer.validated_data
            )
            return master_service_create.execute()
        return Response({"message": "Api-Key error", "success": False, "data": []})

    def patch(self, request, *args, **kwargs):
        if api_key_permission(self.request):
            service_id = self.request.query_params.get("service_id", None)
            master_service_edit = MasterServiceEditSrv(
                service_id=service_id, service_data=self.request.data
            )
            return master_service_edit.execute()
        return Response({"message": "Api-Key error", "success": False, "data": []})

    def delete(self, request, *args, **kwargs):
        if api_key_permission(self.request):
            service_id = self.request.query_params.get("service_id", None)
            if service_id:
                master_service_delete = MasterServiceDeleteSrv(
                    service_id=service_id,
                )
            return master_service_delete.execute()
        return Response({"message": "Api-Key error", "success": False, "data": []})


class MasterVerifyView(APIView):
    @extend_schema(
        description="Verfy master",
        methods=[
            "POST",
        ],
        request=[OpenApiRequest()],
    )
    def post(self, request, *args, **kwargs):
        serializer = MasterVerifySerializer(data=request.data)
        serializer.is_valid(raise_exception=True)
        if api_key_permission(self.request):
            master_verify = MasterVerifySrv(**serializer.validated_data)
            return master_verify.execute()
        return Response({"message": "Api-Key error", "success": False, "data": []}, 401)


class MasterCustomerView(APIView):
    def get(self, request, *args, **kwargs):
        telegram_id = self.kwargs.get("telegram_id")

        if api_key_permission(self.request):
            master_customers = MasterCustomers(
                serializer_data={"telegram_id": telegram_id}
            )
            return master_customers.execute()
        return Response({"message": "Api-Key error", "success": False, "data": []}, 401)


class MasterNextSessionView(APIView):
    def get(self, request, *args, **kwargs):
        telegram_id = self.kwargs.get("telegram_id")

        if api_key_permission(self.request):
            master_next_session = MasterNextSessionSrv(
                serializer_data={"telegram_id": telegram_id}
            )
            return master_next_session.execute()
        return Response({"message": "Api-Key error", "success": False, "data": []}, 401)


class CustomerNextSessionView(APIView):
    def get(self, request, *args, **kwargs):
        if api_key_permission(self.request):
            customer_next_session = CustomerNextSessionSrv(serializer_data=self.kwargs)
            return customer_next_session.execute()
        return Response({"message": "Api-Key error", "success": False, "data": []}, 401)


class CustomerVerifyView(APIView):
    def get(self, request, *args, **kwargs):
        if api_key_permission(self.request):
            customer_next_session = CustomerVerifySrv(serializer_data=self.request.data)
            return customer_next_session.execute()
        return Response({"message": "Api-Key error", "success": False, "data": []}, 401)


class CheckCustomerView(APIView):
    def post(self, request, *args, **kwargs):
        customer_next_session = CheckCustomerSrv(
            serializer_data=self.request.query_params
        )
        return customer_next_session.execute()

from django.db import models
from src.enums import statuses


class Booking(models.Model):
    """Брони мастеров"""

    class Meta:
        verbose_name = "Бронирование"
        verbose_name_plural = "Бронирование"

    booking_date = models.DateField(
        "Дата бронирования",
    )
    booking_time = models.TimeField(
        "Время бронирования",
    )
    booking_end_time = models.TimeField(
        "Длительность процедуры",
    )
    master = models.ForeignKey(
        "src.Master",
        on_delete=models.CASCADE,
    )
    customer = models.ForeignKey(
        "src.Customer", on_delete=models.CASCADE, null=True, blank=True
    )

    def __str__(self):
        return str(self.master)


class Order(models.Model):
    """Заказы"""

    class Meta:
        verbose_name = "Заказ"
        verbose_name_plural = "Заказы"

    begin_date = models.DateField(
        "Дата начала",
    )
    begin_time = models.TimeField(
        "Время начала",
    )
    length_time = models.IntegerField(
        "Длительность процедуры", null=True, blank=True, editable=False
    )
    status = models.CharField(
        "Статус", max_length=20, choices=statuses.CHOICES_STATUS, default="new"
    )
    customer = models.ForeignKey(
        "src.Customer",
        on_delete=models.SET_NULL,
        verbose_name="Клиент",
        null=True,
        blank=True,
    )
    customer_phone = models.CharField("Номер телефона клиента", max_length=30)
    customer_name = models.CharField("Имя клиента", max_length=60)
    customer_notice = models.CharField(
        "Коментарий", max_length=120, null=True, blank=True
    )
    payment_id = models.CharField(max_length=200, default=" ")
    payment_link = models.CharField(max_length=500, default=" ")
    services = models.ManyToManyField(
        "src.Service",
    )

    def __str__(self):
        return str(self.customer_phone)


"""
Image models in project
"""

from django.db import models


class Image(models.Model):
    """
    Изображения
    """

    class Meta:
        verbose_name = "Изображение"
        verbose_name_plural = "Изображения"

    organization = models.ForeignKey("src.Organization", on_delete=models.CASCADE)
    image = models.ImageField("Изображение", upload_to="images/", null=True, blank=True)
    image_url = models.CharField(max_length=700, null=True, blank=True)
    priority = models.IntegerField("Приоритет", default=0)

    def __str__(self):
        return str(self.pk)


import random
import uuid

from django.db import models
from src.enums import statuses


class OrganizationType(models.Model):
    """Типы орзанизаций"""

    class Meta:
        verbose_name = "Тип организации"
        verbose_name_plural = "Типы организаций"

    title = models.CharField(verbose_name="Типы оргинизаций", max_length=255)

    def __str__(self):
        return self.title


class Organization(models.Model):
    """
    Модель "Организация"
    """

    class Meta:
        verbose_name = "Салон"
        verbose_name_plural = "Салоны"

    telegram_id = models.CharField("ID Телеграм", max_length=30, editable=False)
    title = models.CharField(
        "Название",
        max_length=30,
    )
    main_image = models.ImageField(
        "Заглавное изображение", upload_to="business", null=True, blank=True
    )
    main_image_url = models.CharField(max_length=400, null=True, blank=True)
    address = models.CharField(
        "Адрес",
        max_length=30,
    )
    contact_phone = models.CharField(
        "Номер телефона",
        max_length=30,
    )
    time_begin = models.TimeField(
        "Начало рабочего дня",
    )
    time_end = models.TimeField(
        "Конец рабочего дня",
    )
    work_schedule = models.CharField("График работы", max_length=30)
    organization_type = models.ForeignKey(
        "src.OrganizationType", on_delete=models.PROTECT
    )
    is_verified = models.BooleanField("Верифицирован", default=False)

    def __str__(self):
        return self.title


class Master(models.Model):
    """
    Модель "Мастер"
    """

    class Meta:
        verbose_name = "Мастер"
        verbose_name_plural = "Мастера"

    telegram_id = models.CharField(
        "ID Телеграм",
        max_length=30,
        default="web_user",
    )
    code = models.CharField(
        "Код для регистрации", max_length=200, null=True, blank=True
    )
    name = models.CharField(
        "Имя",
        max_length=30,
    )
    surname = models.CharField(
        "Фамилия",
        max_length=30,
    )
    image = models.ImageField("Изображние", upload_to="master", null=True, blank=True)
    image_url = models.CharField(
        "Ссылка на изображение", max_length=255, null=True, blank=True
    )
    gender = models.CharField(
        "Пол", max_length=30, choices=statuses.CHOICES_GENDER, default="MEN", blank=True
    )
    organization = models.ForeignKey(
        Organization, on_delete=models.CASCADE, verbose_name="Организация"
    )
    is_verified = models.BooleanField("Верифицирован", default=False)

    def __str__(self):
        return self.name

    def save(self, *args, **kwargs):
        if self.pk:
            pass
        else:
            self.code = uuid.uuid4().__str__()
        return super().save(*args, **kwargs)


class Service(models.Model):
    """
    Модель "Услуга мастера"
    """

    class Meta:
        verbose_name = "Услуга"
        verbose_name_plural = "Услуги"

    master = models.ForeignKey(
        "src.Master",
        on_delete=models.CASCADE,
    )
    title = models.CharField("Название", max_length=30)
    short_description = models.CharField(
        "Короткое описание", max_length=150, null=True, blank=True
    )
    price = models.PositiveIntegerField(
        "Стоимость",
    )
    min_time = models.IntegerField(
        "Минимальная длительность процедуры",
    )

    def __str__(self):
        return self.title


class Customer(models.Model):
    """
    Модель "Клиент"
    """

    class Meta:
        verbose_name = "Клиент"
        verbose_name_plural = "Клиенты"

    telegram_id = models.CharField("ID Телеграм", max_length=30, default="default-user")
    phone = models.CharField(
        "Номер телефона", max_length=30, null=True, blank=True, unique=True
    )
    username = models.CharField(
        "Имя пользователя telegram", max_length=30, null=True, blank=True
    )
    name = models.CharField("Имя пользователя", max_length=250, null=True, blank=True)
    additional_info = models.CharField(
        "Дополнительная информация", max_length=255, null=True, blank=True
    )
    code = models.CharField(
        "Код для регистрации", max_length=255, null=True, blank=True
    )
    master = models.ForeignKey(
        "src.Master", on_delete=models.SET_NULL, null=True, blank=True
    )
    is_verified = models.BooleanField("Верифицированный клиент", default=False)

    def __str__(self):
        return self.username or self.name

    def save(self, *args, **kwargs):
        if self.pk:
            pass
        else:
            self.code = uuid.uuid4().__str__()
        super().save(*args, **kwargs)


class Moderator(models.Model):
    class Meta:
        verbose_name = "Модераторы"

    telegram_id = models.CharField("ID Телеграм", max_length=30, default="default-user")
    login = models.CharField("Логин", max_length=30, unique=True)
    code = models.CharField("Код", max_length=30, null=True, blank=True)

    def save(self, *args, **kwargs):
        if self.pk:
            pass
        else:
            self.code = random.randint(10000, 99999)
        return super().save(*args, **kwargs)

    def __str__(self):
        return self.login

from django.conf import settings
from django.conf.urls.static import static

from django.urls import include, path

from src.admin import content_management_admin
from drf_spectacular.views import (
    SpectacularAPIView,
    SpectacularRedocView,
    SpectacularSwaggerView,
)


urlpatterns = [
    path("admin/", content_management_admin.urls),
    path("api/", include("src.urls")),
    path("bot-api/", include("bot.urls")),
    path("api/schema/", SpectacularAPIView.as_view(), name="schema"),
    path(
        "schema/", SpectacularSwaggerView.as_view(url_name="schema"), name="swagger-ui"
    ),
    path(
        "api/schema/redoc/",
        SpectacularRedocView.as_view(url_name="schema"),
        name="redoc",
    ),
    path('metrics/', include('django_prometheus.urls'), name='prometheus-django-metrics')
]

if settings.DEBUG:
    urlpatterns += static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT)
